# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from tkinter import ttk, filedialog, scrolledtext
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import subprocess

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class Vision:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, win):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.win = win
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         win.title("Vision IDE")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Create UI elements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.create_menu()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.create_toolbar()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.create_editor()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.create_output()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.create_line_numbers()
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def create_menu(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         menubar = tk.Menu(self.win)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         file_menu = tk.Menu(menubar, tearoff=0)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         file_menu.add_command(label="Open", command=self.open_file)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         file_menu.add_command(label="Save", command=self.save_file)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         menubar.add_cascade(label="File", menu=file_menu)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.win.config(menu=menubar)
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def create_toolbar(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         toolbar = ttk.Frame(self.win)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         run_btn = ttk.Button(toolbar, text="Run", command=self.run_code)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         run_btn.pack(side=tk.LEFT, padx=2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         toolbar.pack(side=tk.TOP, fill=tk.X)
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def create_editor(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.editor = scrolledtext.ScrolledText(self.win, wrap=tk.WORD)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.editor.pack(fill=tk.BOTH, expand=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.editor.bind('<KeyRelease>', self.on_key_release)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.configure_tags()
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def create_output(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.output = scrolledtext.ScrolledText(self.win, height=10)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.output.pack(fill=tk.BOTH, expand=0)
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def create_line_numbers(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.line_numbers = tk.Text(self.win, width=4, padx=3, takefocus=0)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.line_numbers.pack(side=tk.LEFT, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.editor.bind('<KeyRelease>', self.update_line_numbers)
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def configure_tags(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         keywords = ['def', 'class', 'if', 'else', 'for', 'while', 'import']
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.editor.tag_configure('keyword', foreground='blue')
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.editor.tag_configure('string', foreground='#00aa00')
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_key_release(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.highlight_syntax()
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def highlight_syntax(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text = self.editor.get("1.0", tk.END)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for tag in self.editor.tag_names():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.editor.tag_remove(tag, "1.0", tk.END)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Highlight keywords
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for word in keywords:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 start = self.editor.search(word, start, stopindex=tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 end = f"{start}+{len(word)}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.editor.tag_add('keyword', start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 start = end
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def run_code(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         code = self.editor.get("1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         with open("temp.py", "w") as f:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             f.write(code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         try:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             result = subprocess.run(
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 ["python", "temp.py"],
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 capture_output=True,
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text=True,
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 timeout=10
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             )
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.output.delete('1.0', tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.output.insert(tk.END, result.stdout)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.output.insert(tk.END, result.stderr)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         except Exception as e:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.output.insert(tk.END, str(e))
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def open_file(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         file_path = filedialog.askopenfilename()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if file_path:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             with open(file_path, "r") as f:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 content = f.read()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.editor.delete('1.0', tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.editor.insert('1.0', content)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def save_file(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         file_path = filedialog.asksaveasfilename()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if file_path:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             content = self.editor.get("1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             with open(file_path, "w") as f:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 f.write(content)
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def update_line_numbers(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         lines = self.editor.get('1.0', tk.END).count('\n')
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.line_numbers.delete('1.0', tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.line_numbers.insert('1.0', '\n'.join(str(i) for i in range(1, lines+1)))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if __name__ == "__main__":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ide = Vision(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Combined Geometry Managers")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a frame and use pack() to place it
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame = tk.Frame(root, bg="lightgray")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Use grid() inside the frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label1 = tk.Label(frame, text="Label 1", bg="red")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label2 = tk.Label(frame, text="Label 2", bg="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label3 = tk.Label(frame, text="Label 3", bg="blue")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label1.grid(row=0, column=0, sticky="ew")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label2.grid(row=0, column=1, sticky="ew")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label3.grid(row=1, column=0, columnspan=2, sticky="ew")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from tkinter import messagebox
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to show the question box
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def show_question_box():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     response = messagebox.askquestion("Question", "Do you want to continue?")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if response == "yes":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("User clicked Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("User clicked No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Question Box Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a button to trigger the question box
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(root, text="Open Question Box", command=show_question_box)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(pady=20)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to open the custom question box
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def open_question_box():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Create a Toplevel window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     question_window = tk.Toplevel(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     question_window.title("Question Box")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     question_window.geometry("300x150")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Add a label with the question
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     label = tk.Label(question_window, text="Do you want to continue?")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     label.pack(pady=20)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Function to handle "Yes" button click
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_yes():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("User clicked Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         question_window.destroy()  # Close the window

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Function to handle "No" button click
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_no():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("User clicked No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         question_window.destroy()  # Close the window

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Add "Yes" and "No" buttons
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     yes_button = tk.Button(question_window, text="Yes", command=on_yes)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     yes_button.pack(side=tk.LEFT, padx=20)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     no_button = tk.Button(question_window, text="No", command=on_no)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     no_button.pack(side=tk.RIGHT, padx=20)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Custom Question Box Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a button to trigger the custom question box
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(root, text="Open Question Box", command=open_question_box)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(pady=20)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to open the typable question box
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def open_question_box():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Create a Toplevel window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     question_window = tk.Toplevel(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     question_window.title("Typable Question Box")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     question_window.geometry("+300+150")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     question_window.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Add a label with the question
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     label = tk.Label(question_window, text="What is your name?")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     label.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Create an Entry widget for user input
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     entry = tk.Entry(question_window)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     entry.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Function to handle the "Submit" button click
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_submit():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         user_input = entry.get()  # Get the text from the Entry widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if user_input.strip():  # Check if the input is not empty
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(f"User typed: {user_input}")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             question_window.destroy()  # Close the window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("Please enter a valid input")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Add a "Submit" button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     submit_button = tk.Button(question_window, text="Submit", command=on_submit)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     submit_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Typable Question Box Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a button to trigger the typable question box
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(root, text="Open Typable Question Box", command=open_question_box)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(pady=20)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from tkinter import filedialog

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to open a save file dialog
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def save_file():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     file_path = filedialog.asksaveasfilename(
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         title="Save File",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         defaultextension=".txt",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         filetypes=(("Text Files", "*.txt"), ("All Files", "*.*"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     )
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if file_path:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(f"File will be saved to: {file_path}")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Do something with the file path (e.g., save the file)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Save File Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Add a button to open the save file dialog
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(root, text="Save File", command=save_file)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(pady=20)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import os
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # try:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Write some data to the file
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     with open(os.path.join('c:/Users/aminm/Documents','asd.txt'), "w") as file:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         file.write("Hello, this is a sample text file!\n")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         file.write("You can write anything here.")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("File saved successfully:")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # except Exception as e:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(f"Error saving file: {e}")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(root, text="Click Me")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(anchor=tk.NE)  # No side specified
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("500x400")  # Set a larger window size

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create another widget (e.g., a label)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label = tk.Label(root, text="This is a label", bg="lightgray")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label.pack(fill=tk.BOTH, expand=True)  # Takes up most of the window

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(root, text="Click Me")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Pack the button with anchor=tk.NE (no side specified)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(side=tk.TOP,anchor=tk.NE, padx=10, pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = text_widget.search(STRING_PATTERN, start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"{start} lineend"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = text_widget.search(COMMENT_PATTERN, start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"{start} lineend"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("comment", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green", font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello, World!")  # Another comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"(?:\\.|[^"\\])*"|\'(?:\\.|[^\'\\])*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = text_widget.search(STRING_PATTERN, start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"{start} lineend"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = text_widget.search(COMMENT_PATTERN, start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"{start} lineend"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("comment", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green", font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello, World!")  # Another comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(STRING_PATTERN, code):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # "This is a # string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 'Another # string'
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Hello, World!")  # This is an inline comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(STRING_PATTERN, code):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello, World!")  # Another comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello, World!")  # This is an inline comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in list(string_matches):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() < start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 print(2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"[^"]*"|\'[^\']*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ignoring # inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment is inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 inside_string = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # If not inside a string, highlight as a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not inside_string:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"1.0 + {end_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"([^"\\]|\\.)*"|\'([^\'\\]|\\.)*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ensure comments after a string are detected)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Ensure comment is not inside a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         comment_start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         comment_end = f"1.0 + {end_index}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Verify if the comment is inside an already-highlighted string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         overlapping = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for tag in text_widget.tag_names(comment_start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if tag == "string":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 overlapping = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not overlapping:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             text_widget.tag_add("comment", comment_start, comment_end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring keywords inside strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Check if the keyword is inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # If not inside a string or comment, highlight as a keyword
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Another comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import re

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Define keywords, strings, and comments for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # KEYWORDS = ["if", "else", "while", "for", "def", "return", "import", "class"]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # STRING_PATTERN = r'"([^"\\]|\\.)*"|\'([^\'\\]|\\.)*\''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # COMMENT_PATTERN = r'#.*$'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to apply syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def highlight_syntax(event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Remove previous tags
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("keyword", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("string", "1.0", tk.END)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     text_widget.tag_remove("comment", "1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Get the entire text from the widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     code = text_widget.get("1.0", tk.END)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight strings first
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     string_matches = list(re.finditer(STRING_PATTERN, code))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = f"1.0 + {match.start()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end = f"1.0 + {match.end()}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("string", start, end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight comments (ensure they are not inside strings)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for match in re.finditer(COMMENT_PATTERN, code, re.MULTILINE):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start_index = match.start()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         end_index = match.end()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         comment_start = f"1.0 + {start_index}c"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         comment_end = f"1.0 + {end_index}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Check if the comment starts inside a string and adjust the start position
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inside_string = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for string_match in string_matches:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if string_match.start() <= start_index < string_match.end():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 comment_start = f"1.0 + {string_match.end()}c"  # Start comment after the string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         text_widget.tag_add("comment", comment_start, comment_end)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Highlight keywords (ignoring strings and comments)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for keyword in KEYWORDS:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         start = "1.0"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = text_widget.search(r'\m' + keyword + r'\M', start, stopindex=tk.END, regexp=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not start:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             end = f"{start}+{len(keyword)}c"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Ensure it's not inside a string or comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             inside_string_or_comment = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for tag in text_widget.tag_names(start):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if tag in ("string", "comment"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     inside_string_or_comment = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     break

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not inside_string_or_comment:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 text_widget.tag_add("keyword", start, end)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             start = end

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Syntax Highlighting Example")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a Text widget
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget = tk.Text(root, wrap=tk.NONE, font=("Courier New", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.pack(fill=tk.BOTH, expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Configure tags for syntax highlighting
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("keyword", foreground="blue", font=("Courier New", 12, "bold"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("string", foreground="green")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.tag_configure("comment", foreground="gray", font=("Courier New", 12, "italic"))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the highlight function to key release events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.bind("<KeyRelease>", highlight_syntax)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Insert some sample code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sample_code = '''# This is a comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def hello_world():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Hello # World")  # This is a comment after a string
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return "Python # This is inside a string"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Another comment
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # '''
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # text_widget.insert(tk.END, sample_code)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply syntax highlighting to the initial code
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # highlight_syntax()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Dark Mode Example")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set the background color of the main window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")  # Dark gray

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create a frame with dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame = tk.Frame(root, bg="#3B3B3B")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame.pack(pady=20, padx=20, fill="both", expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Add a label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label = tk.Label(frame, text="Dark Mode Enabled", fg="white", bg="#3B3B3B", font=("Arial", 14))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Add an entry box
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # entry = tk.Entry(frame, fg="white", bg="#555555", insertbackground="white", font=("Arial", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # entry.pack(pady=5)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Add a button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(frame, text="Click Me", fg="white", bg="#444444", activebackground="#666666")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def apply_dark_mode(widget):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """Recursively applies dark mode to all widgets."""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     widget.configure(bg="#2E2E2E", fg="white")  # Set dark theme
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if isinstance(widget, tk.Entry):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         widget.configure(insertbackground="white")  # White cursor
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for child in widget.winfo_children():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         apply_dark_mode(child)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")  # Set main window background

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame = tk.Frame(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label = tk.Label(frame, text="Dark Mode Example")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # entry = tk.Entry(frame)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(frame, text="Click Me")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label.pack(pady=5)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # entry.pack(pady=5)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(pady=5)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # apply_dark_mode(root)  # Apply dark mode to all widgets

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from tkinter import ttk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def apply_dark_mode(widget):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """Recursively applies dark mode to all widgets."""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     try:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         widget.configure(bg="#2E2E2E")  # Set background for all widgets
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     except tk.TclError:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         pass  # Ignore widgets that don't support 'bg'

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if isinstance(widget, (tk.Label, tk.Button, tk.Checkbutton, tk.Radiobutton)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         widget.configure(fg="white")  # Set text color
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if isinstance(widget, tk.Entry):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         widget.configure(insertbackground="white", fg="white", bg="#555555")  # Set cursor color and text

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for child in widget.winfo_children():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         apply_dark_mode(child)  # Apply to all child widgets

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")  # Set window background
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style = ttk.Style()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style.theme_use("clam")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame = tk.Frame(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label = tk.Label(frame, text="Dark Mode Example")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # entry = tk.Entry(frame)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = tk.Button(frame, text="Click Me")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label.pack(pady=5)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # entry.pack(pady=5)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(pady=5)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # apply_dark_mode(root)  # Apply dark mode to all widgets
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # """Enable dark mode for tkinter window title bar"""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # HWND = ctypes.windll.user32.GetParent(root.winfo_id())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # DWMWA_USE_IMMERSIVE_DARK_MODE = 20  # Windows 10/11 flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ctypes.windll.dwmapi.DwmSetWindowAttribute(HWND, DWMWA_USE_IMMERSIVE_DARK_MODE, ctypes.byref(ctypes.c_int(2)), 4)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from tkinter import ttk

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Use a modern theme
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style = ttk.Style()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style.theme_use("clam")  # Best theme for dark mode

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set dark colors
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style.configure("TFrame", background="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style.configure("TLabel", background="#2E2E2E", foreground="white")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style.configure("TButton", background="#444444", foreground="white")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style.configure("TEntry", fieldbackground="#555555", foreground="white", insertcolor="white")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame = ttk.Frame(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # frame.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label = ttk.Label(frame, text="Dark Mode UI")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # entry = ttk.Entry(frame)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button = ttk.Button(frame, text="Click Me")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # label.pack(pady=5)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # entry.pack(pady=5)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # button.pack(pady=5)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def enable_dark_title_bar(window):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """Enable dark mode for tkinter title bar (Windows 10/11)"""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     HWND = ctypes.windll.user32.GetParent(window.winfo_id())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     DWMWA_USE_IMMERSIVE_DARK_MODE = 20  # Dark mode attribute
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     value = ctypes.c_int(2)  # Enable dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.dwmapi.DwmSetWindowAttribute(HWND, DWMWA_USE_IMMERSIVE_DARK_MODE, ctypes.byref(value), ctypes.sizeof(value))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Dark Mode Title Bar")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # enable_dark_title_bar(root)  # Apply dark mode to the title bar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set dark background
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Add some UI elements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Label(root, text="Dark Mode Active", fg="white", bg="#2E2E2E", font=("Arial", 14)).pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Button(root, text="OK", fg="white", bg="#444444", activebackground="#666666").pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def enable_dark_title_bar(window):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """Enable dark mode for tkinter title bar (Windows 10/11)"""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     HWND = ctypes.windll.user32.GetParent(window.winfo_id())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     DWMWA_USE_IMMERSIVE_DARK_MODE = 20  # Dark mode attribute
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     value = ctypes.c_int(2)  # Enable dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.dwmapi.DwmSetWindowAttribute(HWND, DWMWA_USE_IMMERSIVE_DARK_MODE, ctypes.byref(value), ctypes.sizeof(value))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Dark Mode Title Bar")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # enable_dark_title_bar(root)  # Apply dark mode to the title bar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set dark background
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Add some UI elements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Label(root, text="Dark Mode Active", fg="white", bg="#2E2E2E", font=("Arial", 14)).pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Button(root, text="OK", fg="white", bg="#444444", activebackground="#666666").pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def force_dark_title_bar(window):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """Forces dark title bar if Windows dark mode is enabled"""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     HWND = ctypes.windll.user32.GetParent(window.winfo_id())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     DWMWA_USE_IMMERSIVE_DARK_MODE = 20  # Windows API for dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     is_dark = ctypes.c_int(2)  # 2 = Dark Mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.dwmapi.DwmSetWindowAttribute(HWND, DWMWA_USE_IMMERSIVE_DARK_MODE, ctypes.byref(is_dark), ctypes.sizeof(is_dark))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Dark Mode Title Bar Test")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # force_dark_title_bar(root)  # Apply dark mode to the title bar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Dark background for UI
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sample UI elements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Label(root, text="Dark Mode Active", fg="white", bg="#2E2E2E", font=("Arial", 14)).pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Button(root, text="OK", fg="white", bg="#444444", activebackground="#666666").pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def force_dark_title_bar(window):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """Forces dark title bar (if Windows dark mode is enabled)"""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     HWND = ctypes.windll.user32.GetParent(window.winfo_id())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     DWMWA_USE_IMMERSIVE_DARK_MODE = 20  # Attribute for dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     DARK_MODE = ctypes.c_int(2)  # 2 = Enable dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.dwmapi.DwmSetWindowAttribute(HWND, DWMWA_USE_IMMERSIVE_DARK_MODE, ctypes.byref(DARK_MODE), ctypes.sizeof(DARK_MODE))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Dark Mode Title Bar")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # force_dark_title_bar(root)  # Apply dark mode to title bar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set dark background
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # UI elements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Label(root, text="Dark Mode Active", fg="white", bg="#2E2E2E", font=("Arial", 14)).pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Button(root, text="OK", fg="white", bg="#444444", activebackground="#666666").pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from sys import platform

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def force_dark_mode(window):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """Enable Windows' immersive dark mode for tkinter title bar"""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if platform != "win32":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return  # This only works on Windows

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     HWND = ctypes.windll.user32.GetParent(window.winfo_id())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     DARK_MODE = 20  # Windows dark mode attribute
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     value = ctypes.c_int(1)  # 1 = True Dark Mode (not just a color)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.dwmapi.DwmSetWindowAttribute(HWND, DARK_MODE, ctypes.byref(value), ctypes.sizeof(value))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("True Dark Title Bar")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # force_dark_mode(root)  # Apply True Dark Mode

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set dark UI background
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # UI Elements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Label(root, text="Windows Dark Mode Enabled", fg="white", bg="#2E2E2E", font=("Arial", 14)).pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Button(root, text="OK", fg="white", bg="#444444", activebackground="#666666").pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def force_real_dark_mode(window):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """Enable Windows' true dark mode (title bar + right-click menu)"""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     HWND = ctypes.windll.user32.GetParent(window.winfo_id())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     DARK_MODE = 20  # Immersive dark mode attribute
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     TRUE_DARK = ctypes.c_int(2)  # 2 = Native Windows dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.dwmapi.DwmSetWindowAttribute(HWND, DARK_MODE, ctypes.byref(TRUE_DARK), ctypes.sizeof(TRUE_DARK))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Enable dark theme at the OS level
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     try:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ctypes.windll.uxtheme.SetPreferredAppMode(1)  # 1 = Dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     except AttributeError:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         pass  # Older Windows versions may not support this

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Windows True Dark Mode")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # force_real_dark_mode(root)  # Apply real dark mode

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set a dark background for the app
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # UI Elements
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Label(root, text="Windows True Dark Mode Applied", fg="white", bg="#2E2E2E", font=("Arial", 14)).pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Button(root, text="OK", fg="white", bg="#444444", activebackground="#666666").pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_true_dark_mode(window):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if sys.platform != "win32":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return  # Only applies to Windows

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = ctypes.windll.user32.GetParent(window.winfo_id())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Try to tell Windows to use dark mode for the app (undocumented API)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     try:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         SetPreferredAppMode = ctypes.windll.uxtheme.SetPreferredAppMode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # 1 means "prefer dark mode"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         SetPreferredAppMode(1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     except Exception as e:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("SetPreferredAppMode not available:", e)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Now use DWM to force immersive dark mode on the title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     DWMWA_USE_IMMERSIVE_DARK_MODE = 20  # Attribute identifier
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dark_mode_flag = ctypes.c_int(1)     # 1 = enable dark mode
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     try:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ctypes.windll.dwmapi.DwmSetWindowAttribute(hwnd, 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             DWMWA_USE_IMMERSIVE_DARK_MODE, 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ctypes.byref(dark_mode_flag), 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ctypes.sizeof(dark_mode_flag))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     except Exception as e:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("DwmSetWindowAttribute failed:", e)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the Tkinter window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("True Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Attempt to set a true dark title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_true_dark_mode(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set the app background to a dark color
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.configure(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sample UI elements with dark mode styling
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Label(root, text="Dark Mode Title Bar", fg="white", bg="#2E2E2E", font=("Arial", 14)).pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Button(root, text="OK", fg="white", bg="#444444", activebackground="#666666").pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from tkinter import messagebox

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Function to handle window dragging
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def move_window(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.geometry(f'+{event.x_root}+{event.y_root}')

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def close_window():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.quit()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create the root window with no border and no title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("400x300")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Disable the native title bar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Custom title bar frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = tk.Frame(root, bg="#2E2E2E", relief="raised", bd=2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x", pady=0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Add a label for the custom title text
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_label = tk.Label(title_bar, text="Custom Dark Mode Title Bar", fg="white", bg="#2E2E2E", font=("Arial", 14))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_label.pack(side="left", padx=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Add a close button to the title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # close_button = tk.Button(title_bar, text="X", fg="white", bg="#444444", font=("Arial", 10), command=close_window)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # close_button.pack(side="right")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bind the custom title bar to allow dragging the window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.bind("<B1-Motion>", move_window)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set dark background for the rest of the window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content_frame = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content_frame.pack(fill="both", expand=True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sample content
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Label(content_frame, text="Dark Mode Content", fg="white", bg="#2E2E2E", font=("Arial", 12)).pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tk.Button(content_frame, text="OK", fg="white", bg="#444444", activebackground="#666666", command=lambda: messagebox.showinfo("Info", "Button clicked")).pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Run the Tkinter event loop
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Left: (Optional) App icon label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon = tk.Label(self, text="🗔", bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.pack(side="left", padx=(5,0))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Center: Title text
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Right: Control buttons
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind events for dragging the window and double-click to maximize/restore
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Also bind the same for child widgets to capture events
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for widget in (self.icon, self.title_label):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.overrideredirect(False)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # Maximize to full screen (minus taskbar if needed)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.destroy()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native window decorations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")  # Dark background

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame for the rest of the app
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Example content: you can replace these with your actual app widgets
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.", bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me", bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ensure that when the window is restored from minimization, we reapply the borderless look
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Optional: App icon on the left
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon = tk.Label(self, text="🗔", bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.pack(side="left", padx=(5,0))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title text
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Create control buttons (pack in reverse order so final order is: minimize, maximize, close)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Pack close button first so it appears on the far right.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Then maximize/restore button.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Finally, the minimize button.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind events for dragging and double-click to maximize/restore.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for widget in (self.icon, self.title_label):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.overrideredirect(False)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Destroy the Tk window and exit the program.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.destroy()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")  # Set dark background

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame for your application
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Example content (replace with your actual widgets)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.", 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                          bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me", 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reapply borderless look when the window is restored from minimization.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Optional: App icon on the left
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon = tk.Label(self, text="🗔", bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.pack(side="left", padx=(5,0))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title text
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Create control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button: turns red on hover
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button: slight hover color change
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button: slight hover color change
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind events for dragging the window and double-click for maximize/restore.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for widget in (self.icon, self.title_label):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Remove custom decorations and iconify the window.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.overrideredirect(False)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Properly exit the application.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.destroy()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")  # Dark background

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame for your application.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Example content (replace with your actual widgets).
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reapply borderless look when the window is restored from minimization.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Optional: App icon on the left
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon = tk.Label(self, text="🗔", bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.pack(side="left", padx=(5,0))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title text (project name)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Create control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (turns red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button (hover effect)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button (hover effect)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind mouse events to the title bar and its child widgets for dragging
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for widget in (self.icon, self.title_label):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Use global coordinates relative to the window's current top-left corner.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate new window position based on global pointer position minus offset.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Remove custom decorations and iconify the window.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.overrideredirect(False)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Properly exit the application.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.destroy()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")  # Dark background

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame for your application.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Example content (replace with your actual widgets).
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reapply borderless look when the window is restored from minimization.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Optional: App icon on the left
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon = tk.Label(self, text="🗔", bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.pack(side="left", padx=(5, 0))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title text (project name)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button: turns red on hover
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button: slight hover effect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button: slight hover effect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events to the title bar and its child widgets
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for widget in (self.icon, self.title_label):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             widget.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset using global coordinates minus window's position.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Remove custom decoration before minimizing.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.overrideredirect(False)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.destroy()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native window decorations.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")  # Set dark background.

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Force the window to appear in the taskbar and Alt+Tab:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # hwnd = ctypes.windll.user32.GetParent(root.winfo_id())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style = style | WS_EX_APPWINDOW  # Add app window style.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # style = style & ~WS_EX_TOOLWINDOW  # Remove tool window style.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.withdraw()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.after(0, root.deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame for your application.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Example content.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reapply borderless look when the window is restored from minimization.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjusts the window's extended style so that it appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # Use the window's own handle.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # Add the app window flag.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # Remove the tool window flag.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label (project name)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button: turns red on hover
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button: slight hover effect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button: slight hover effect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset relative to the window's current position.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move window based on global pointer position minus the initial offset.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Before iconifying, disable overrideredirect so that the window appears normally.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.overrideredirect(False)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.destroy()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native window decorations.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Apply the extended style hack so that the window shows in Alt+Tab and the taskbar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reapply overrideredirect and extended style when the window is deiconified.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     set_appwindow(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame for your application.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the extended window style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Disable custom decoration briefly and set the window state to 'iconic'
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.overrideredirect(False)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.wm_state('iconic')

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.destroy()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native decorations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reapply custom borderless style when the window is deiconified.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     set_appwindow(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from pystray import Icon, MenuItem, Menu
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from PIL import Image, ImageDraw

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize the window using the tray icon
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.withdraw()  # Hide the window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.run()  # Start the system tray icon

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.stop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def restore(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.deiconify()  # Show the window again when clicking the tray icon
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.stop()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def create_icon(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Creating the system tray icon
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         image = Image.new("RGBA", (64, 64), (0, 0, 0, 0))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         draw = ImageDraw.Draw(image)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         draw.rectangle([(0, 0), (64, 64)], fill="black")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         menu = Menu(MenuItem("Restore", self.restore), MenuItem("Quit", self.close))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon = Icon("test_icon", image, "My Application", menu)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native decorations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reapply custom borderless style when the window is deiconified.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     set_appwindow(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set up system tray icon
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.create_icon()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Normal minimize to taskbar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window and keeps it in the taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native decorations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Reapply custom borderless style when the window is deiconified.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def on_deiconify(event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     set_appwindow(root)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.bind("<Map>", on_deiconify)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Normal minimize to taskbar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window and keeps it in the taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Normal minimize to taskbar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window and keeps it in the taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Make the window borderless and keep it in the taskbar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar and borders
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.after(0, root.overrideredirect, False)  # Restore the ability to minimize and maximize

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Normal minimize to taskbar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window and keeps it in the taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar and borders

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from pystray import Icon as icon, MenuItem as item
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from PIL import Image, ImageDraw

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the system tray (does not iconify)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.withdraw()  # Hide the window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.visible = True  # Show the system tray icon

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.stop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_tray_icon_click(self, icon, item):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Show window again when tray icon is clicked
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.deiconify()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.icon.visible = False  # Hide the system tray icon

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create system tray icon
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def create_tray_icon():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Create an icon
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     icon_image = Image.new('RGBA', (64, 64), (255, 255, 255, 255))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     draw = ImageDraw.Draw(icon_image)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     draw.rectangle([0, 0, 64, 64], fill=(0, 0, 0))  # Black square as icon
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tray_icon = icon("My App", icon_image, menu=(item("Show", show_window), item("Quit", quit_app)))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return tray_icon

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def show_window(icon, item):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Show the main window again from the system tray
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.deiconify()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     icon.visible = False  # Hide tray icon

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def quit_app(icon, item):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Quit the program from the system tray
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar and borders

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create system tray icon
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tray_icon = create_tray_icon()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Start the system tray icon in a separate thread
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tray_icon.run()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar and borders

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Do not use overrideredirect(True) here, so native minimize works
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar and borders

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Do not use overrideredirect(True), so minimize works.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.title("Custom Dark Mode Title Bar")  # Add a standard title to avoid errors

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Dark Mode settings
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.tk_setPalette(background="#2E2E2E", foreground="white", activeBackground="#444444")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the taskbar (custom minimize)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Remove the default title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the taskbar (custom minimize)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Remove the default title bar but still allow the window to show in taskbar and Alt+Tab
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)  # Ensure the window still appears in the taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the taskbar (custom minimize)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Disable default title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Allow taskbar visibility with the window
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.attributes("-toolwindow", False)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Enable app window in taskbar and Alt+Tab functionality
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Minimize to the taskbar (custom minimize)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Disable default title bar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.overrideredirect(True)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Set an application icon for the taskbar
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.iconbitmap("favicon.ico")  # Add your app icon path here

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ensure the window appears in the taskbar (re-enable taskbar interaction)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.attributes("-toolwindow", False)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Enable app window in taskbar and Alt+Tab functionality
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # # # # # # Disable default title bar
# # # # # # # # # # # # # # # # # # # root.overrideredirect(True)

# # # # # # # # # # # # # # # # # # # # Set an application icon for the taskbar
# # # # # # # # # # # # # # # # # # # root.iconbitmap("favicon.ico")  # Add your app icon path here

# # # # # # # # # # # # # # # # # # # # Ensure the window appears in the taskbar
# # # # # # # # # # # # # # # # # # # root.attributes("-toolwindow", False)

# # # # # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # # # # # Add close protocol for the window (this closes gracefully)
# # # # # # # # # # # # # # # # # # # root.protocol("WM_DELETE_WINDOW", lambda: root.quit())

# # # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # # import pygetwindow as gw
# # # # # # # # # # # # # # # # # # import time

# # # # # # # # # # # # # # # # # # def resize_window():
# # # # # # # # # # # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # # # # # # # # # # #     time.sleep(1)
    
# # # # # # # # # # # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # # # # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # # # # # # # # # # #     # Resize the window to 800x600
# # # # # # # # # # # # # # # # # #     window.resizeTo(800, 600)

# # # # # # # # # # # # # # # # # # root = tk.Tk()

# # # # # # # # # # # # # # # # # # # Make the window fullscreen first
# # # # # # # # # # # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # # # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # # # # # # # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # # # # # # # # # # # # # # label = tk.Label(root, text="Window Resized After Fullscreen", font=("Arial", 20))
# # # # # # # # # # # # # # # # # # label.pack(padx=20, pady=20)

# # # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # # import pygetwindow as gw
# # # # # # # # # # # # # # # # # import time

# # # # # # # # # # # # # # # # # def resize_window():
# # # # # # # # # # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # # # # # # # # # #     time.sleep(1)
    
# # # # # # # # # # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # # # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # # # # # # # # # #     # Resize the window to 800x600
# # # # # # # # # # # # # # # # #     window.resizeTo(800, 600)

# # # # # # # # # # # # # # # # # def close_app():
# # # # # # # # # # # # # # # # #     root.quit()

# # # # # # # # # # # # # # # # # def minimize_app():
# # # # # # # # # # # # # # # # #     root.iconify()

# # # # # # # # # # # # # # # # # root = tk.Tk()

# # # # # # # # # # # # # # # # # # Make the window fullscreen first
# # # # # # # # # # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # # # # # # # # # Set initial geometry
# # # # # # # # # # # # # # # # # root.geometry("400x300")

# # # # # # # # # # # # # # # # # # Create a custom title bar frame
# # # # # # # # # # # # # # # # # title_bar = tk.Frame(root, bg="black", relief="raised", bd=2)
# # # # # # # # # # # # # # # # # title_bar.pack(fill="x", side="top")

# # # # # # # # # # # # # # # # # # Add title text to the title bar
# # # # # # # # # # # # # # # # # title_label = tk.Label(title_bar, text="Custom Title Bar", fg="white", bg="black", font=("Arial", 14))
# # # # # # # # # # # # # # # # # title_label.pack(side="left", padx=10)

# # # # # # # # # # # # # # # # # # Add Minimize button to the title bar
# # # # # # # # # # # # # # # # # minimize_button = tk.Button(title_bar, text="-", command=minimize_app, bg="black", fg="white", bd=0)
# # # # # # # # # # # # # # # # # minimize_button.pack(side="right")

# # # # # # # # # # # # # # # # # # Add Close button to the title bar
# # # # # # # # # # # # # # # # # close_button = tk.Button(title_bar, text="X", command=close_app, bg="black", fg="white", bd=0)
# # # # # # # # # # # # # # # # # close_button.pack(side="right")

# # # # # # # # # # # # # # # # # # Create the rest of the window content
# # # # # # # # # # # # # # # # # content_frame = tk.Frame(root)
# # # # # # # # # # # # # # # # # content_frame.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # # # Add a label in the content frame
# # # # # # # # # # # # # # # # # content_label = tk.Label(content_frame, text="Window Resized and with Custom Title Bar", font=("Arial", 16))
# # # # # # # # # # # # # # # # # content_label.pack(padx=20, pady=20)

# # # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # # import sys

# # # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # #     Adjust the window's extended style so the window appears in the taskbar and Alt+Tab.
# # # # # # # # # # # # # # # #     """
# # # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW    # add app window flag
# # # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)

# # # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")
        
# # # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)
        
# # # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white",
# # # # # # # # # # # # # # # #                     "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}
        
# # # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))
        
# # # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)
            
# # # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # # # # # #         self.master.iconify()  # Minimizes the window to taskbar

# # # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # # #         sys.exit(0)

# # # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # # # # # # Do not use overrideredirect(True) here, so native minimize works
# # # # # # # # # # # # # # # # root.overrideredirect(True)  # Remove native title bar and borders

# # # # # # # # # # # # # # # # # Create and pack the custom title bar.
# # # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # # content.pack(expand=True, fill="both")
# # # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.",
# # # # # # # # # # # # # # # #                           bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me",
# # # # # # # # # # # # # # # #                            bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # # import pygetwindow as gw
# # # # # # # # # # # # # # # import time


# # # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # # #     """ Adjust the window's extended style so the window appears in the taskbar and Alt+Tab. """
# # # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW  # add app window flag
# # # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)


# # # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # # #         self.config(bg="#2E2E2E")

# # # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)

# # # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}

# # # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # # #         sys.exit(0)  # Exit the program


# # # # # # # # # # # # # # # def resize_window():
# # # # # # # # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # # # # # # # #     time.sleep(1)
    
# # # # # # # # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # # # # # # # #     # Resize the window to 800x600
# # # # # # # # # # # # # # #     window.resizeTo(800, 600)


# # # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # # root.config(bg="#2E2E2E")
# # # # # # # # # # # # # # # set_appwindow(root)  # Ensure the window appears in the taskbar and Alt+Tab

# # # # # # # # # # # # # # # # Make the window fullscreen first
# # # # # # # # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # # # # root.overrideredirect(True)  # This removes the title bar
# # # # # # # # # # # # # # # root.config(bg="#2E2E2E")  # Set background color to dark mode

# # # # # # # # # # # # # # # # Create and pack the custom title bar
# # # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # # Add some content to the content frame
# # # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.", bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me", bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # import pygetwindow as gw
# # # # # # # # # # # # # # import time


# # # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # # #     """ Adjust the window's extended style so the window appears in the taskbar and Alt+Tab. """
# # # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # # #     style |= WS_EX_APPWINDOW  # add app window flag
# # # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)


# # # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # # #         self.config(bg="#2E2E2E")

# # # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)

# # # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}

# # # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # # #         sys.exit(0)  # Exit the program


# # # # # # # # # # # # # # def resize_window():
# # # # # # # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # # # # # # #     time.sleep(1)
    
# # # # # # # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # # # # # # #     # Resize the window to 800x600
# # # # # # # # # # # # # #     window.resizeTo(800, 600)


# # # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # # Ensure the window appears in the taskbar and Alt+Tab
# # # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # # Make the window fullscreen first
# # # # # # # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # # # root.overrideredirect(True)  # This removes the title bar
# # # # # # # # # # # # # # root.config(bg="#2E2E2E")  # Set background color to dark mode

# # # # # # # # # # # # # # # Create and pack the custom title bar
# # # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # # # Add some content to the content frame
# # # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.", bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me", bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # # import ctypes
# # # # # # # # # # # # # import sys
# # # # # # # # # # # # # import pygetwindow as gw
# # # # # # # # # # # # # import time


# # # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # # #     """ Adjust the window's extended style so the window appears in the taskbar and Alt+Tab. """
# # # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # # #     style |= WS_EX_APPWINDOW  # add app window flag
# # # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)


# # # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # # #         self.master = master
# # # # # # # # # # # # #         self.config(bg="#2E2E2E")

# # # # # # # # # # # # #         # Title label
# # # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)

# # # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}

# # # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # # #         else:
# # # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # # #     def close(self):
# # # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # # #         sys.exit(0)  # Exit the program


# # # # # # # # # # # # # def resize_window():
# # # # # # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # # # # # #     time.sleep(1)
    
# # # # # # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # # # # # #     # Resize the window to 800x600
# # # # # # # # # # # # #     window.resizeTo(800, 600)


# # # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # # Ensure the window appears in the taskbar and Alt+Tab
# # # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # # Make the window fullscreen first
# # # # # # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # # root.overrideredirect(True)  # This removes the title bar
# # # # # # # # # # # # # root.config(bg="#2E2E2E")  # Set background color to dark mode

# # # # # # # # # # # # # # Create and pack the custom title bar
# # # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # # Content frame
# # # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # # Add some content to the content frame
# # # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.", bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # # example_button = tk.Button(content, text="Click Me", bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # # import ctypes
# # # # # # # # # # # # import sys
# # # # # # # # # # # # import pygetwindow as gw
# # # # # # # # # # # # import time

# # # # # # # # # # # # def set_appwindow(root):
# # # # # # # # # # # #     """ Adjust the window's extended style so the window appears in the taskbar and Alt+Tab. """
# # # # # # # # # # # #     root.update_idletasks()
# # # # # # # # # # # #     hwnd = root.winfo_id()  # get window handle
# # # # # # # # # # # #     GWL_EXSTYLE = -20
# # # # # # # # # # # #     WS_EX_APPWINDOW = 0x00040000
# # # # # # # # # # # #     WS_EX_TOOLWINDOW = 0x00000080
# # # # # # # # # # # #     style = ctypes.windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
# # # # # # # # # # # #     style |= WS_EX_APPWINDOW  # add app window flag
# # # # # # # # # # # #     style &= ~WS_EX_TOOLWINDOW  # remove tool window flag
# # # # # # # # # # # #     ctypes.windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, style)


# # # # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # # # #         self.master = master
# # # # # # # # # # # #         self.config(bg="#2E2E2E")

# # # # # # # # # # # #         # Title label
# # # # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Segoe UI", 10))
# # # # # # # # # # # #         self.title_label.pack(side="left", padx=5)

# # # # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Segoe UI", 10), "width": 4}

# # # # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # # # # # # # #         # Minimize button
# # # # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # # # # # # # #         self._offsetx = 0
# # # # # # # # # # # #         self._offsety = 0
# # # # # # # # # # # #         self.is_maximized = False
# # # # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # # # #     def start_move(self, event):
# # # # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # # # #     def on_move(self, event):
# # # # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # # # #     def minimize(self):
# # # # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # # # #         self.master.iconify()

# # # # # # # # # # # #     def maximize_restore(self, event=None):
# # # # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # # # #             self.is_maximized = True
# # # # # # # # # # # #         else:
# # # # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # # # #             self.is_maximized = False

# # # # # # # # # # # #     def close(self):
# # # # # # # # # # # #         self.master.quit()
# # # # # # # # # # # #         sys.exit(0)  # Exit the program


# # # # # # # # # # # # def resize_window():
# # # # # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # # # # #     time.sleep(1)
    
# # # # # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # # # # #     # Resize the window to 800x600
# # # # # # # # # # # #     window.resizeTo(800, 600)


# # # # # # # # # # # # # Main Application Setup
# # # # # # # # # # # # root = tk.Tk()
# # # # # # # # # # # # root.geometry("800x600")
# # # # # # # # # # # # root.config(bg="#2E2E2E")

# # # # # # # # # # # # # Ensure the window appears in the taskbar and Alt+Tab
# # # # # # # # # # # # set_appwindow(root)

# # # # # # # # # # # # # Make the window fullscreen first
# # # # # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # # # # Remove the default title bar (borderless window)
# # # # # # # # # # # # root.overrideredirect(True)  # This removes the title bar
# # # # # # # # # # # # root.config(bg="#2E2E2E")  # Set background color to dark mode

# # # # # # # # # # # # # Create and pack the custom title bar
# # # # # # # # # # # # title_bar = CustomTitleBar(root, title="Custom Dark Mode Title Bar")
# # # # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # # # Content frame
# # # # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # # # Add some content to the content frame
# # # # # # # # # # # # example_label = tk.Label(content, text="This is your application content.", bg="#2E2E2E", fg="white", font=("Segoe UI", 12))
# # # # # # # # # # # # example_label.pack(pady=20)
# # # # # # # # # # # # example_button = tk.Button(content, text="Click Me", bg="#444444", fg="white", activebackground="#666666", font=("Segoe UI", 10))
# # # # # # # # # # # # example_button.pack(pady=10)

# # # # # # # # # # # # root.mainloop()
# # # # # # # # # # # import tkinter as tk
# # # # # # # # # # # import pygetwindow as gw
# # # # # # # # # # # import time

# # # # # # # # # # # def resize_window():
# # # # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # # # #     time.sleep(1)
    
# # # # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # # # #     # Resize the window to 800x600
# # # # # # # # # # #     window.resizeTo(800, 600)

# # # # # # # # # # # root = tk.Tk()

# # # # # # # # # # # # Make the window fullscreen first
# # # # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # # # # # # # # Label
# # # # # # # # # # # label = tk.Label(root, text="Window Resized After Fullscreen", font=("Arial", 20))
# # # # # # # # # # # label.pack(padx=20, pady=20)

# # # # # # # # # # # # Button with enhanced appearance
# # # # # # # # # # # def on_enter(event):
# # # # # # # # # # #     button.config(bg="#444444", fg="white")

# # # # # # # # # # # def on_leave(event):
# # # # # # # # # # #     button.config(bg="#2E2E2E", fg="white")

# # # # # # # # # # # button = tk.Button(root, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # # # # # # # # # button.pack(pady=20)
# # # # # # # # # # # button.bind("<Enter>", on_enter)
# # # # # # # # # # # button.bind("<Leave>", on_leave)

# # # # # # # # # # # root.mainloop()
# # # # # # # # # # import tkinter as tk
# # # # # # # # # # import pygetwindow as gw
# # # # # # # # # # import time

# # # # # # # # # # def resize_window():
# # # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # # #     time.sleep(1)
    
# # # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # # #     # Resize the window to 800x600
# # # # # # # # # #     window.resizeTo(800, 600)

# # # # # # # # # # root = tk.Tk()

# # # # # # # # # # # Make the window fullscreen first
# # # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # # # # # # # Custom Title Bar
# # # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # # #         self.master = master
# # # # # # # # # #         self.config(bg="#2E2E2E", height=40)

# # # # # # # # # #         # Title label
# # # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# # # # # # # # # #         self.title_label.pack(side="left", padx=10)

# # # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# # # # # # # # # #         # Close button (red on hover)
# # # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # # # # # #         # Maximize/Restore button
# # # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # # # # # #         # Minimize button
# # # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # # # # # #         self._offsetx = 0
# # # # # # # # # #         self._offsety = 0
# # # # # # # # # #         self.is_maximized = False
# # # # # # # # # #         self.previous_geometry = None

# # # # # # # # # #     def start_move(self, event):
# # # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # # #     def on_move(self, event):
# # # # # # # # # #         # Move the window smoothly.
# # # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # # #     def minimize(self):
# # # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # # #         self.master.iconify()

# # # # # # # # # #     def maximize_restore(self):
# # # # # # # # # #         if not self.is_maximized:
# # # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # # #             self.is_maximized = True
# # # # # # # # # #         else:
# # # # # # # # # #             if self.previous_geometry:
# # # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # # #             self.is_maximized = False

# # # # # # # # # #     def close(self):
# # # # # # # # # #         self.master.quit()

# # # # # # # # # # # Title Bar & Content
# # # # # # # # # # title_bar = CustomTitleBar(root, title="My Custom Application")
# # # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # # Content Frame
# # # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # # Add some content to the content frame
# # # # # # # # # # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # # # # # # # # # label.pack(padx=20, pady=20)

# # # # # # # # # # # Button with enhanced appearance
# # # # # # # # # # def on_enter(event):
# # # # # # # # # #     button.config(bg="#444444", fg="white")

# # # # # # # # # # def on_leave(event):
# # # # # # # # # #     button.config(bg="#2E2E2E", fg="white")

# # # # # # # # # # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # # # # # # # # button.pack(pady=20)
# # # # # # # # # # button.bind("<Enter>", on_enter)
# # # # # # # # # # button.bind("<Leave>", on_leave)

# # # # # # # # # # root.mainloop()
# # # # # # # # # import tkinter as tk
# # # # # # # # # import pygetwindow as gw
# # # # # # # # # import time

# # # # # # # # # def resize_window():
# # # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # # #     time.sleep(1)
    
# # # # # # # # #     # Get the current window using pygetwindow
# # # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # # #     # Resize the window to 800x600
# # # # # # # # #     window.resizeTo(800, 600)

# # # # # # # # # root = tk.Tk()

# # # # # # # # # # Make the window fullscreen first
# # # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # # root.after(100, resize_window)

# # # # # # # # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # # # # # # Custom Title Bar
# # # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # # #         self.master = master
# # # # # # # # #         self.config(bg="#2E2E2E", height=40)

# # # # # # # # #         # Title label
# # # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# # # # # # # # #         self.title_label.pack(side="left", padx=10)

# # # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# # # # # # # # #         # Close button (red on hover)
# # # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # # # # #         # Maximize/Restore button
# # # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # # # # #         # Minimize button
# # # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # # # # #         self._offsetx = 0
# # # # # # # # #         self._offsety = 0
# # # # # # # # #         self.is_maximized = False
# # # # # # # # #         self.previous_geometry = None

# # # # # # # # #     def start_move(self, event):
# # # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # # #     def on_move(self, event):
# # # # # # # # #         # Move the window smoothly.
# # # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # # #         y = event.y_root - self._offsety
# # # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # # #     def minimize(self):
# # # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # # #         self.master.iconify()

# # # # # # # # #     def maximize_restore(self):
# # # # # # # # #         if not self.is_maximized:
# # # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # # #             self.is_maximized = True
# # # # # # # # #         else:
# # # # # # # # #             if self.previous_geometry:
# # # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # # #             self.is_maximized = False

# # # # # # # # #     def close(self):
# # # # # # # # #         self.master.quit()

# # # # # # # # # # Title Bar & Content
# # # # # # # # # title_bar = CustomTitleBar(root, title="My Custom Application")
# # # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # # Content Frame
# # # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # # Add some content to the content frame
# # # # # # # # # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # # # # # # # # label.pack(padx=20, pady=20)

# # # # # # # # # # Button with enhanced appearance
# # # # # # # # # def on_enter(event):
# # # # # # # # #     button.config(bg="#444444", fg="white")

# # # # # # # # # def on_leave(event):
# # # # # # # # #     button.config(bg="#2E2E2E", fg="white")

# # # # # # # # # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # # # # # # # button.pack(pady=20)
# # # # # # # # # button.bind("<Enter>", on_enter)
# # # # # # # # # button.bind("<Leave>", on_leave)

# # # # # # # # # root.mainloop()
# # # # # # # # import tkinter as tk
# # # # # # # # import pygetwindow as gw
# # # # # # # # import time

# # # # # # # # def resize_window():
# # # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # # #     time.sleep(1)
    
# # # # # # # #     # Get the current window using pygetwindow
# # # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # # #     # Resize the window to 800x600
# # # # # # # #     window.resizeTo(800, 600)

# # # # # # # # root = tk.Tk()

# # # # # # # # # Make the window fullscreen first
# # # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # # root.after(100, resize_window)

# # # # # # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # # # # # Custom Title Bar
# # # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # # #         super().__init__(master, **kwargs)
# # # # # # # #         self.master = master
# # # # # # # #         self.config(bg="#2E2E2E", height=40)

# # # # # # # #         # Title label
# # # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# # # # # # # #         self.title_label.pack(side="left", padx=10)

# # # # # # # #         # Control buttons (packed right-to-left)
# # # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# # # # # # # #         # Close button (red on hover)
# # # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # # # #         # Maximize/Restore button
# # # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # # # #         # Minimize button
# # # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # # # #         self._offsetx = 0
# # # # # # # #         self._offsety = 0
# # # # # # # #         self.is_maximized = False
# # # # # # # #         self.previous_geometry = None

# # # # # # # #     def start_move(self, event):
# # # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # # #     def on_move(self, event):
# # # # # # # #         # Move the window smoothly.
# # # # # # # #         x = event.x_root - self._offsetx
# # # # # # # #         y = event.y_root - self._offsety
# # # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # # #     def minimize(self):
# # # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # # #         self.master.iconify()

# # # # # # # #     def maximize_restore(self):
# # # # # # # #         if not self.is_maximized:
# # # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # # #             self.is_maximized = True
# # # # # # # #         else:
# # # # # # # #             if self.previous_geometry:
# # # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # # #             self.is_maximized = False

# # # # # # # #     def close(self):
# # # # # # # #         self.master.quit()

# # # # # # # # # Title Bar & Content
# # # # # # # # title_bar = CustomTitleBar(root, title="My Custom Application")
# # # # # # # # title_bar.pack(fill="x")

# # # # # # # # # Content Frame
# # # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # # Add some content to the content frame
# # # # # # # # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # # # # # # # label.pack(padx=20, pady=20)

# # # # # # # # # Button with enhanced appearance
# # # # # # # # def on_enter(event):
# # # # # # # #     button.config(bg="#444444", fg="white")

# # # # # # # # def on_leave(event):
# # # # # # # #     button.config(bg="#2E2E2E", fg="white")

# # # # # # # # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # # # # # # button.pack(pady=20)
# # # # # # # # button.bind("<Enter>", on_enter)
# # # # # # # # button.bind("<Leave>", on_leave)

# # # # # # # # root.mainloop()
# # # # # # # import tkinter as tk
# # # # # # # import pygetwindow as gw
# # # # # # # import time

# # # # # # # def resize_window():
# # # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # # #     time.sleep(1)
    
# # # # # # #     # Get the current window using pygetwindow
# # # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # # #     # Resize the window to 800x600
# # # # # # #     window.resizeTo(800, 600)

# # # # # # # root = tk.Tk()

# # # # # # # # Make the window fullscreen first
# # # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # # root.after(100, resize_window)

# # # # # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # # # # Custom Title Bar
# # # # # # # class CustomTitleBar(tk.Frame):
# # # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # # #         super().__init__(master, **kwargs)
# # # # # # #         self.master = master
# # # # # # #         self.config(bg="#2E2E2E", height=40)

# # # # # # #         # Title label
# # # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# # # # # # #         self.title_label.pack(side="left", padx=10)

# # # # # # #         # Control buttons (packed right-to-left)
# # # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# # # # # # #         # Close button (red on hover)
# # # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # # #         # Maximize/Restore button
# # # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # # #         # Minimize button
# # # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # # #         # Bind dragging events for both the frame and the title label
# # # # # # #         self.bind("<Button-1>", self.start_move)
# # # # # # #         self.bind("<B1-Motion>", self.on_move)
# # # # # # #         self.bind("<Double-Button-1>", self.maximize_restore)
# # # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # # #         self._offsetx = 0
# # # # # # #         self._offsety = 0
# # # # # # #         self.is_maximized = False
# # # # # # #         self.previous_geometry = None

# # # # # # #     def start_move(self, event):
# # # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # # #     def on_move(self, event):
# # # # # # #         # Move the window smoothly.
# # # # # # #         x = event.x_root - self._offsetx
# # # # # # #         y = event.y_root - self._offsety
# # # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # # #     def minimize(self):
# # # # # # #         # Minimize to the taskbar (native minimize)
# # # # # # #         self.master.iconify()

# # # # # # #     def maximize_restore(self):
# # # # # # #         if not self.is_maximized:
# # # # # # #             self.previous_geometry = self.master.geometry()
# # # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # # #             self.is_maximized = True
# # # # # # #         else:
# # # # # # #             if self.previous_geometry:
# # # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # # #             self.is_maximized = False

# # # # # # #     def close(self):
# # # # # # #         self.master.quit()

# # # # # # # # Title Bar & Content
# # # # # # # title_bar = CustomTitleBar(root, title="My Custom Application")
# # # # # # # title_bar.pack(fill="x")

# # # # # # # # Content Frame
# # # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # # content.pack(expand=True, fill="both")

# # # # # # # # Add some content to the content frame
# # # # # # # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # # # # # # label.pack(padx=20, pady=20)

# # # # # # # # Button with enhanced appearance
# # # # # # # def on_enter(event):
# # # # # # #     button.config(bg="#444444", fg="white")

# # # # # # # def on_leave(event):
# # # # # # #     button.config(bg="#2E2E2E", fg="white")

# # # # # # # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # # # # # button.pack(pady=20)
# # # # # # # button.bind("<Enter>", on_enter)
# # # # # # # button.bind("<Leave>", on_leave)

# # # # # # # root.mainloop()
# # # # # # import tkinter as tk
# # # # # # import pygetwindow as gw
# # # # # # import time

# # # # # # def resize_window():
# # # # # #     # Give some time for the fullscreen to apply before resizing
# # # # # #     time.sleep(1)
    
# # # # # #     # Get the current window using pygetwindow
# # # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # # #     # Resize the window to 800x600
# # # # # #     window.resizeTo(800, 600)

# # # # # # root = tk.Tk()

# # # # # # # Make the window fullscreen first
# # # # # # root.wm_attributes("-fullscreen", True)

# # # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # # root.after(100, resize_window)

# # # # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # # # Custom Title Bar
# # # # # # class CustomTitleBar(tk.Frame):
# # # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # # #         super().__init__(master, **kwargs)
# # # # # #         self.master = master
# # # # # #         self.config(bg="#2E2E2E", height=40)

# # # # # #         # Title label
# # # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# # # # # #         self.title_label.pack(side="left", padx=10)

# # # # # #         # Control buttons (packed right-to-left)
# # # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# # # # # #         # Close button (red on hover)
# # # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # # #         self.btn_close.pack(side="right", padx=1)
# # # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # # #         # Maximize/Restore button
# # # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # # #         self.btn_max.pack(side="right", padx=1)
# # # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # # #         # Minimize button
# # # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # # #         self.btn_min.pack(side="right", padx=1)
# # # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # # #         # Bind dragging events for both the frame and the title label
# # # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # # #         self._offsetx = 0
# # # # # #         self._offsety = 0
# # # # # #         self.is_maximized = False
# # # # # #         self.previous_geometry = None

# # # # # #     def start_move(self, event):
# # # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # # #     def on_move(self, event):
# # # # # #         # Move the window smoothly.
# # # # # #         x = event.x_root - self._offsetx
# # # # # #         y = event.y_root - self._offsety
# # # # # #         self.master.geometry(f"+{x}+{y}")

# # # # # #     def minimize(self):
# # # # # #         # Minimize to the taskbar (native minimize)
# # # # # #         self.master.iconify()

# # # # # #     def maximize_restore(self):
# # # # # #         if not self.is_maximized:
# # # # # #             self.previous_geometry = self.master.geometry()
# # # # # #             self.master.geometry(f"{self.master.winfo_screenwidth()}x{self.master.winfo_screenheight()}+0+0")
# # # # # #             self.is_maximized = True
# # # # # #         else:
# # # # # #             if self.previous_geometry:
# # # # # #                 self.master.geometry(self.previous_geometry)
# # # # # #             self.is_maximized = False

# # # # # #     def close(self):
# # # # # #         self.master.quit()

# # # # # # # Title Bar & Content
# # # # # # title_bar = CustomTitleBar(root, title="My Custom Application")
# # # # # # title_bar.pack(fill="x")

# # # # # # # Content Frame
# # # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # # content.pack(expand=True, fill="both")

# # # # # # # Add some content to the content frame
# # # # # # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # # # # # label.pack(padx=20, pady=20)

# # # # # # # Button with enhanced appearance
# # # # # # def on_enter(event):
# # # # # #     button.config(bg="#444444", fg="white")

# # # # # # def on_leave(event):
# # # # # #     button.config(bg="#2E2E2E", fg="white")

# # # # # # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # # # # button.pack(pady=20)
# # # # # # button.bind("<Enter>", on_enter)
# # # # # # button.bind("<Leave>", on_leave)

# # # # # # root.mainloop()
# # # # # import tkinter as tk
# # # # # import pygetwindow as gw
# # # # # import time

# # # # # def resize_window():
# # # # #     # Give some time for the fullscreen to apply before resizing
# # # # #     time.sleep(1)
    
# # # # #     # Get the current window using pygetwindow
# # # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # # #     # Resize the window to 800x600
# # # # #     window.resizeTo(800, 600)

# # # # # root = tk.Tk()

# # # # # # Make the window fullscreen first
# # # # # root.wm_attributes("-fullscreen", True)

# # # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # # root.after(100, resize_window)

# # # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # # Custom Title Bar
# # # # # class CustomTitleBar(tk.Frame):
# # # # #     def __init__(self, master, title="My Application", **kwargs):
# # # # #         super().__init__(master, **kwargs)
# # # # #         self.master = master
# # # # #         self.config(bg="#2E2E2E", height=40)

# # # # #         # Title label
# # # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# # # # #         self.title_label.pack(side="left", padx=10)

# # # # #         # Control buttons (packed right-to-left)
# # # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# # # # #         # Close button (red on hover)
# # # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # # #         self.btn_close.pack(side="right", padx=1)
# # # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # # #         # Maximize/Restore button
# # # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # # #         self.btn_max.pack(side="right", padx=1)
# # # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # # #         # Minimize button
# # # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # # #         self.btn_min.pack(side="right", padx=1)
# # # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # # #         # Bind dragging events for both the frame and the title label
# # # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # # #         self._offsetx = 0
# # # # #         self._offsety = 0
# # # # #         self.is_maximized = False
# # # # #         self.previous_geometry = None

# # # # #     def start_move(self, event):
# # # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # # #     def on_move(self, event):
# # # # #         # Move the window smoothly using pygetwindow
# # # # #         x = event.x_root - self._offsetx
# # # # #         y = event.y_root - self._offsety
# # # # #         window = gw.getWindowsWithTitle("Tk")[0]
# # # # #         window.moveTo(x, y)

# # # # #     def minimize(self):
# # # # #         # Minimize to the taskbar (native minimize)
# # # # #         self.master.iconify()

# # # # #     def maximize_restore(self):
# # # # #         window = gw.getWindowsWithTitle("Tk")[0]
# # # # #         if not self.is_maximized:
# # # # #             self.previous_geometry = self.master.geometry()
# # # # #             window.maximize()
# # # # #             self.is_maximized = True
# # # # #         else:
# # # # #             if self.previous_geometry:
# # # # #                 self.master.geometry(self.previous_geometry)
# # # # #             window.restore()
# # # # #             self.is_maximized = False

# # # # #     def close(self):
# # # # #         self.master.quit()

# # # # # # Title Bar & Content
# # # # # title_bar = CustomTitleBar(root, title="My Custom Application")
# # # # # title_bar.pack(fill="x")

# # # # # # Content Frame
# # # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # # content.pack(expand=True, fill="both")

# # # # # # Add some content to the content frame
# # # # # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # # # # label.pack(padx=20, pady=20)

# # # # # # Button with enhanced appearance
# # # # # def on_enter(event):
# # # # #     button.config(bg="#444444", fg="white")

# # # # # def on_leave(event):
# # # # #     button.config(bg="#2E2E2E", fg="white")

# # # # # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # # # button.pack(pady=20)
# # # # # button.bind("<Enter>", on_enter)
# # # # # button.bind("<Leave>", on_leave)

# # # # # root.mainloop()
# # # # import tkinter as tk
# # # # import pygetwindow as gw
# # # # import time

# # # # def resize_window():
# # # #     # Give some time for the fullscreen to apply before resizing
# # # #     time.sleep(1)
    
# # # #     # Get the current window using pygetwindow
# # # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # # #     # Resize the window to 800x600
# # # #     window.resizeTo(800, 600)

# # # # root = tk.Tk()

# # # # # Make the window fullscreen first
# # # # root.wm_attributes("-fullscreen", True)

# # # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # # root.after(100, resize_window)

# # # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # # Custom Title Bar
# # # # class CustomTitleBar(tk.Frame):
# # # #     def __init__(self, master, title="My Application", **kwargs):
# # # #         super().__init__(master, **kwargs)
# # # #         self.master = master
# # # #         self.config(bg="#2E2E2E", height=40)

# # # #         # Title label
# # # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# # # #         self.title_label.pack(side="left", padx=10)

# # # #         # Control buttons (packed right-to-left)
# # # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# # # #         # Close button (red on hover)
# # # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # # #         self.btn_close.pack(side="right", padx=1)
# # # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # # #         # Maximize/Restore button
# # # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # # #         self.btn_max.pack(side="right", padx=1)
# # # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # # #         # Minimize button
# # # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # # #         self.btn_min.pack(side="right", padx=1)
# # # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # # #         # Bind dragging events for both the frame and the title label
# # # #         self.title_label.bind("<Button-1>", self.start_move)
# # # #         self.title_label.bind("<B1-Motion>", self.on_move)
# # # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # # #         self._offsetx = 0
# # # #         self._offsety = 0
# # # #         self.is_maximized = False
# # # #         self.previous_geometry = None

# # # #     def start_move(self, event):
# # # #         # Calculate offset based on global coordinates minus the window's top-left.
# # # #         self._offsetx = event.x_root - self.master.winfo_x()
# # # #         self._offsety = event.y_root - self.master.winfo_y()

# # # #     def on_move(self, event):
# # # #         # Move the window smoothly using pygetwindow
# # # #         x = event.x_root - self._offsetx
# # # #         y = event.y_root - self._offsety
# # # #         window = gw.getWindowsWithTitle("Tk")[0]
# # # #         window.moveTo(x, y)

# # # #     def minimize(self):
# # # #         # Minimize to the taskbar (native minimize)
# # # #         self.master.iconify()

# # # #     def maximize_restore(self):
# # # #         window = gw.getWindowsWithTitle("Tk")[0]
# # # #         if not self.is_maximized:
# # # #             self.previous_geometry = self.master.geometry()
# # # #             window.maximize()
# # # #             self.is_maximized = True
# # # #         else:
# # # #             if self.previous_geometry:
# # # #                 self.master.geometry(self.previous_geometry)
# # # #             window.restore()
# # # #             self.is_maximized = False

# # # #     def close(self):
# # # #         self.master.quit()

# # # # # Title Bar & Content
# # # # title_bar = CustomTitleBar(root, title="My Custom Application")
# # # # title_bar.pack(fill="x")

# # # # # Content Frame
# # # # content = tk.Frame(root, bg="#2E2E2E")
# # # # content.pack(expand=True, fill="both")

# # # # # Add some content to the content frame
# # # # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # # # label.pack(padx=20, pady=20)

# # # # # Button with enhanced appearance
# # # # def on_enter(event):
# # # #     button.config(bg="#444444", fg="white")

# # # # def on_leave(event):
# # # #     button.config(bg="#2E2E2E", fg="white")

# # # # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # # button.pack(pady=20)
# # # # button.bind("<Enter>", on_enter)
# # # # button.bind("<Leave>", on_leave)

# # # # root.mainloop()
# # # import tkinter as tk
# # # import pygetwindow as gw
# # # import time

# # # def resize_window():
# # #     # Give some time for the fullscreen to apply before resizing
# # #     time.sleep(1)
    
# # #     # Get the current window using pygetwindow
# # #     window = gw.getWindowsWithTitle("Tk")[0]
    
# # #     # Resize the window to 800x600
# # #     window.resizeTo(800, 600)

# # # root = tk.Tk()

# # # # Make the window fullscreen first
# # # root.wm_attributes("-fullscreen", True)

# # # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # # root.after(100, resize_window)

# # # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # # Custom Title Bar
# # # class CustomTitleBar(tk.Frame):
# # #     def __init__(self, master, title="My Application", **kwargs):
# # #         super().__init__(master, **kwargs)
# # #         self.master = master
# # #         self.config(bg="#2E2E2E", height=40)

# # #         # Title label
# # #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# # #         self.title_label.pack(side="left", padx=10)

# # #         # Control buttons (packed right-to-left)
# # #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# # #         # Close button (red on hover)
# # #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# # #         self.btn_close.pack(side="right", padx=1)
# # #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# # #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# # #         # Maximize/Restore button
# # #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# # #         self.btn_max.pack(side="right", padx=1)
# # #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# # #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# # #         # Minimize button
# # #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# # #         self.btn_min.pack(side="right", padx=1)
# # #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# # #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# # #         # Bind dragging events for the entire custom title bar frame
# # #         self.bind("<Button-1>", self.start_move)
# # #         self.bind("<B1-Motion>", self.on_move)
# # #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# # #         self._offsetx = 0
# # #         self._offsety = 0
# # #         self.is_maximized = False
# # #         self.previous_geometry = None

# # #     def start_move(self, event):
# # #         # Calculate offset based on global coordinates minus the window's top-left.
# # #         self._offsetx = event.x_root - self.master.winfo_x()
# # #         self._offsety = event.y_root - self.master.winfo_y()

# # #     def on_move(self, event):
# # #         # Move the window smoothly using pygetwindow
# # #         x = event.x_root - self._offsetx
# # #         y = event.y_root - self._offsety
# # #         window = gw.getWindowsWithTitle("Tk")[0]
# # #         window.moveTo(x, y)

# # #     def minimize(self):
# # #         # Minimize to the taskbar (native minimize)
# # #         self.master.iconify()

# # #     def maximize_restore(self):
# # #         window = gw.getWindowsWithTitle("Tk")[0]
# # #         if not self.is_maximized:
# # #             self.previous_geometry = self.master.geometry()
# # #             window.maximize()
# # #             self.is_maximized = True
# # #         else:
# # #             if self.previous_geometry:
# # #                 self.master.geometry(self.previous_geometry)
# # #             window.restore()
# # #             self.is_maximized = False

# # #     def close(self):
# # #         self.master.quit()

# # # # Title Bar & Content
# # # title_bar = CustomTitleBar(root, title="My Custom Application")
# # # title_bar.pack(fill="x")

# # # # Content Frame
# # # content = tk.Frame(root, bg="#2E2E2E")
# # # content.pack(expand=True, fill="both")

# # # # Add some content to the content frame
# # # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # # label.pack(padx=20, pady=20)

# # # # Button with enhanced appearance
# # # def on_enter(event):
# # #     button.config(bg="#444444", fg="white")

# # # def on_leave(event):
# # #     button.config(bg="#2E2E2E", fg="white")

# # # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # # button.pack(pady=20)
# # # button.bind("<Enter>", on_enter)
# # # button.bind("<Leave>", on_leave)

# # # root.mainloop()
# # import tkinter as tk
# # import pygetwindow as gw
# # import time

# # def resize_window():
# #     # Give some time for the fullscreen to apply before resizing
# #     time.sleep(1)
    
# #     # Get the current window using pygetwindow
# #     window = gw.getWindowsWithTitle("Tk")[0]
    
# #     # Resize the window to 800x600
# #     window.resizeTo(800, 600)

# # root = tk.Tk()

# # # Make the window fullscreen first
# # root.wm_attributes("-fullscreen", True)

# # # After fullscreen, resize the window (we add a delay to allow fullscreen to take effect)
# # root.after(100, resize_window)

# # root.geometry("400x300")  # Initial geometry (but will be overridden by resizing)

# # # Custom Title Bar
# # class CustomTitleBar(tk.Frame):
# #     def __init__(self, master, title="My Application", **kwargs):
# #         super().__init__(master, **kwargs)
# #         self.master = master
# #         self.config(bg="#2E2E2E", height=40)

# #         # Title label
# #         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
# #         self.title_label.pack(side="left", padx=10)

# #         # Control buttons (packed right-to-left)
# #         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

# #         # Close button (red on hover)
# #         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
# #         self.btn_close.pack(side="right", padx=1)
# #         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
# #         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

# #         # Maximize/Restore button
# #         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
# #         self.btn_max.pack(side="right", padx=1)
# #         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
# #         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

# #         # Minimize button
# #         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
# #         self.btn_min.pack(side="right", padx=1)
# #         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
# #         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

# #         # Bind dragging events for the entire custom title bar frame
# #         self.bind("<Button-1>", self.start_move)
# #         self.bind("<B1-Motion>", self.on_move)
# #         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

# #         # Bind dragging events for project name label as well
# #         self.title_label.bind("<Button-1>", self.start_move)
# #         self.title_label.bind("<B1-Motion>", self.on_move)

# #         self._offsetx = 0
# #         self._offsety = 0
# #         self.is_maximized = False
# #         self.previous_geometry = None

# #     def start_move(self, event):
# #         # Calculate offset based on global coordinates minus the window's top-left.
# #         self._offsetx = event.x_root - self.master.winfo_x()
# #         self._offsety = event.y_root - self.master.winfo_y()

# #     def on_move(self, event):
# #         # Move the window smoothly using pygetwindow
# #         x = event.x_root - self._offsetx
# #         y = event.y_root - self._offsety
# #         window = gw.getWindowsWithTitle("Tk")[0]
# #         window.moveTo(x, y)

# #     def minimize(self):
# #         # Minimize to the taskbar (native minimize)
# #         self.master.iconify()

# #     def maximize_restore(self):
# #         window = gw.getWindowsWithTitle("Tk")[0]
# #         if not self.is_maximized:
# #             self.previous_geometry = self.master.geometry()
# #             window.maximize()
# #             self.is_maximized = True
# #         else:
# #             if self.previous_geometry:
# #                 self.master.geometry(self.previous_geometry)
# #             window.restore()
# #             self.is_maximized = False

# #     def close(self):
# #         self.master.quit()

# # # Title Bar & Content
# # title_bar = CustomTitleBar(root, title="My Custom Application")
# # title_bar.pack(fill="x")

# # # Content Frame
# # content = tk.Frame(root, bg="#2E2E2E")
# # content.pack(expand=True, fill="both")

# # # Add some content to the content frame
# # label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# # label.pack(padx=20, pady=20)

# # # Button with enhanced appearance
# # def on_enter(event):
# #     button.config(bg="#444444", fg="white")

# # def on_leave(event):
# #     button.config(bg="#2E2E2E", fg="white")

# # button = tk.Button(content, text="Click Me", font=("Arial", 14), bg="#2E2E2E", fg="white", activebackground="#666666", relief="flat", bd=0)
# # button.pack(pady=20)
# # button.bind("<Enter>", on_enter)
# # button.bind("<Leave>", on_leave)

# # root.mainloop()



# # import tkinter as tk

# # def apply_dark_mode(widget):
# #     """Recursively applies dark mode to all widgets."""
# #     try:
# #         widget.configure(bg="#2E2E2E")  # Set background for all widgets
# #     except tk.TclError:
# #         pass  # Ignore widgets that don't support 'bg'

# #     if isinstance(widget, (tk.Label, tk.Button, tk.Checkbutton, tk.Radiobutton)):
# #         widget.configure(fg="white")  # Set text color
    
# #     if isinstance(widget, tk.Entry):
# #         widget.configure(insertbackground="white", fg="white", bg="#555555")  # Set cursor color and text

# #     for child in widget.winfo_children():
# #         apply_dark_mode(child)  # Apply to all child widgets

# # root = tk.Tk()
# # root.geometry("400x300")
# # root.configure(bg="#2E2E2E")  # Set window background

# # frame = tk.Frame(root)
# # frame.pack(expand=True, fill="both")

# # label = tk.Label(frame, text="Dark Mode Example")
# # entry = tk.Entry(frame)
# # button = tk.Button(frame, text="Click Me")

# # label.pack(pady=5)
# # entry.pack(pady=5)
# # button.pack(pady=5)

# # apply_dark_mode(root)  # Apply dark mode to all widgets

# # root.mainloop()
# import tkinter as tk
# import pygetwindow as gw
# import time

# def resize_window():
#     time.sleep(1)
#     window = gw.getWindowsWithTitle("Tk")[0]
#     window.resizeTo(800, 600)

# root = tk.Tk()
# root.wm_attributes("-fullscreen", True)
# root.after(100, resize_window)
# root.geometry("400x300")

# class CustomTitleBar(tk.Frame):
#     def __init__(self, master, title="My Application", **kwargs):
#         super().__init__(master, **kwargs)
#         self.master = master
#         self.config(bg="#2E2E2E", height=40)

#         # Title label
#         self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
#         self.title_label.pack(side="left", padx=10)

#         # Control buttons
#         btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

#         self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
#         self.btn_close.pack(side="right", padx=1)
#         self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
#         self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

#         self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
#         self.btn_max.pack(side="right", padx=1)
#         self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
#         self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

#         self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
#         self.btn_min.pack(side="right", padx=1)
#         self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
#         self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

#         self.bind("<Button-1>", self.start_move)
#         self.bind("<B1-Motion>", self.on_move)
#         self.title_label.bind("<Button-1>", self.start_move)
#         self.title_label.bind("<B1-Motion>", self.on_move)
#         self.title_label.bind("<Double-Button-1>", self.maximize_restore)

#         self._offsetx = 0
#         self._offsety = 0
#         self.is_maximized = False
#         self.previous_geometry = None

#     def start_move(self, event):
#         if self.is_maximized:
#             return  # Disable dragging when maximized
#         self._offsetx = event.x_root - self.master.winfo_x()
#         self._offsety = event.y_root - self.master.winfo_y()

#     def on_move(self, event):
#         if self.is_maximized:
#             return
#         x = event.x_root - self._offsetx
#         y = event.y_root - self._offsety
#         window = gw.getWindowsWithTitle("Tk")[0]
#         window.moveTo(x, y)

#     def minimize(self):
#         self.master.iconify()

#     def maximize_restore(self):
#         window = gw.getWindowsWithTitle("Tk")[0]
#         if not self.is_maximized:
#             self.previous_geometry = self.master.geometry()
#             window.maximize()
#             self.btn_max.config(text="❐")  # Change icon when maximized
#             self.is_maximized = True
#         else:
#             if self.previous_geometry:
#                 self.master.geometry(self.previous_geometry)
#             window.restore()
#             self.btn_max.config(text="☐")  # Restore original icon
#             self.is_maximized = False

#     def close(self):
#         self.master.quit()

# title_bar = CustomTitleBar(root, title="My Custom Application")
# title_bar.pack(fill="x")

# content = tk.Frame(root, bg="#2E2E2E")
# content.pack(expand=True, fill="both")

# label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
# label.pack(padx=20, pady=20)

# root.mainloop()
import tkinter as tk
import pygetwindow as gw
import time

def resize_window():
    time.sleep(1)
    window = gw.getWindowsWithTitle("Tk")[0]
    window.resizeTo(800, 600)

root = tk.Tk()
root.wm_attributes("-fullscreen", True)
root.after(100, resize_window)
root.geometry("400x300")

class CustomTitleBar(tk.Frame):
    def __init__(self, master, title="My Application", **kwargs):
        super().__init__(master, **kwargs)
        self.master = master
        self.config(bg="#2E2E2E", height=40)

        # Title label
        self.title_label = tk.Label(self, text=title, bg="#2E2E2E", fg="white", font=("Arial", 16))
        self.title_label.pack(side="left", padx=10)

        # Control buttons
        btn_opts = {"bd": 0, "bg": "#2E2E2E", "fg": "white", "activebackground": "#444444", "font": ("Arial", 12), "width": 4}

        self.btn_close = tk.Button(self, text="✕", command=self.close, **btn_opts)
        self.btn_close.pack(side="right", padx=1)
        self.btn_close.bind("<Enter>", lambda e: self.btn_close.config(bg="#FF5555"))
        self.btn_close.bind("<Leave>", lambda e: self.btn_close.config(bg="#2E2E2E"))

        self.btn_max = tk.Button(self, text="☐", command=self.maximize_restore, **btn_opts)
        self.btn_max.pack(side="right", padx=1)
        self.btn_max.bind("<Enter>", lambda e: self.btn_max.config(bg="#444444"))
        self.btn_max.bind("<Leave>", lambda e: self.btn_max.config(bg="#2E2E2E"))

        self.btn_min = tk.Button(self, text="─", command=self.minimize, **btn_opts)
        self.btn_min.pack(side="right", padx=1)
        self.btn_min.bind("<Enter>", lambda e: self.btn_min.config(bg="#444444"))
        self.btn_min.bind("<Leave>", lambda e: self.btn_min.config(bg="#2E2E2E"))

        # Bind dragging and double-click maximize
        self.bind_events()

        self._offsetx = 0
        self._offsety = 0
        self.is_maximized = False
        self.previous_geometry = None

    def bind_events(self):
        """ Bind events to allow dragging and maximize on double-click. """
        for widget in [self, self.title_label]:
            widget.bind("<Button-1>", self.start_move)
            widget.bind("<B1-Motion>", self.on_move)
            widget.bind("<Double-Button-1>", self.maximize_restore)

    def start_move(self, event):
        if self.is_maximized:
            return  # Disable dragging when maximized
        self._offsetx = event.x_root - self.master.winfo_x()
        self._offsety = event.y_root - self.master.winfo_y()

    def on_move(self, event):
        if self.is_maximized:
            return
        x = event.x_root - self._offsetx
        y = event.y_root - self._offsety
        window = gw.getWindowsWithTitle("Tk")[0]
        window.moveTo(x, y)

    def minimize(self):
        self.master.iconify()

    def maximize_restore(self, event=None):
        """ Toggle between maximized and normal window state. """
        window = gw.getWindowsWithTitle("Tk")[0]
        if not self.is_maximized:
            self.previous_geometry = self.master.geometry()
            window.maximize()
            self.btn_max.config(text="❐")  # Change icon when maximized
            self.is_maximized = True
        else:
            if self.previous_geometry:
                self.master.geometry(self.previous_geometry)
            window.restore()
            self.btn_max.config(text="☐")  # Restore original icon
            self.is_maximized = False

    def close(self):
        self.master.quit()

title_bar = CustomTitleBar(root, title="My Custom Application")
title_bar.pack(fill="x")

content = tk.Frame(root, bg="#2E2E2E")
content.pack(expand=True, fill="both")

label = tk.Label(content, text="Window Resized After Fullscreen", font=("Arial", 20), bg="#2E2E2E", fg="white")
label.pack(padx=20, pady=20)

root.mainloop()
